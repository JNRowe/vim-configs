#! /usr/bin/python3
"""Extract vim code blocks from reST file.

This could be a lot more generic, but it has exactly *this* use and nothing
more.

"""

from argparse import ArgumentParser
from os.path import dirname, split as split_path
from sys import path
from typing import List

from docutils.core import publish_doctree
from docutils.nodes import Node
from docutils.parsers.rst import Directive, directives, nodes, roles
from docutils.utils import DependencyList

path.insert(0, dirname(split_path(__file__)[0]))
from conf import rst_epilog  # NOQA: E402


class StubDirective(Directive):

    """No-op class to mock out Sphinx-specific directives."""

    has_content = True

    def run(self) -> List:
        return []


def is_vim_code(node: Node) -> bool:
    """Filter function to extract code blocks.

    .. note::

        This extracts plain literals and blocks marked as vim.  We can assume
        all plain literals are vim code, as we’ve set ``highlight_language`` in
        :file:`conf.py`.

    Args:
        node: Docutils object to filter
    """
    if node.tagname == 'literal_block':
        classes = node.attributes['classes']
        if classes == [] or 'vim' in classes:
            return True
    return False


# Stub used Sphinx directives and roles, as we’re not using them in output
for directive in ('envvar', 'function', 'todo'):
    directives.register_directive(directive, StubDirective)
for role in (
    'class',
    'command',
    'doc',
    'envvar',
    'file',
    'func',
    'kbd',
    'manpage',
    'pypi',
    'ref',
    'repo',
    'wikipedia',
):
    roles.register_generic_role(role, nodes.comment)
# Separate handling of abbr to workaround conf.py's rst_epilog usage
roles.register_generic_role('abbr', nodes.literal)

p = ArgumentParser()
p.add_argument('-r', help='record dependencies', metavar='file')
p.add_argument('input', help='reST file to process')
p.add_argument('output', help='vim file to generate')
args = p.parse_args()

dl = DependencyList()
settings = {
    '_disable_config': 1,
    'record_dependencies': dl,
}

with open(args.input) as f:
    doctree = publish_doctree(
        f.read() + rst_epilog, args.input, settings_overrides=settings
    )

code_blocks = doctree.traverse(condition=is_vim_code)

if len(code_blocks) >= 1:
    with open(args.output, 'w') as f:
        for block in code_blocks:
            f.write(block.astext() + '\n')
    if args.r:
        with open(args.r, 'w') as f:
            f.write(f'{args.output}: {" ".join(dl.list)}\n')
